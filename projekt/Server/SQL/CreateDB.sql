-- MySQL Script generated by MySQL Workbench
-- Mon Nov  4 12:48:43 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`StudenterCanvas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`StudenterCanvas` ;

CREATE TABLE IF NOT EXISTS `mydb`.`StudenterCanvas` (
  `STUD_ID` INT NOT NULL AUTO_INCREMENT,
  `USER_NAME` VARCHAR(45) NULL,
  `FIRST_NAME` VARCHAR(45) NULL,
  `LAST_NAME` VARCHAR(45) NULL,
  PRIMARY KEY (`STUD_ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Courses`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Courses` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Courses` (
  `CourseID` INT NOT NULL AUTO_INCREMENT,
  `KursKod` VARCHAR(45) NULL,
  PRIMARY KEY (`CourseID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Assignments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Assignments` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Assignments` (
  `idAssignments` INT NOT NULL AUTO_INCREMENT,
  `AssignmentName` VARCHAR(45) NULL,
  `Courses_CourseID` INT NOT NULL,
  PRIMARY KEY (`idAssignments`, `Courses_CourseID`),
  INDEX `fk_Assignments_Courses1_idx` (`Courses_CourseID` ASC) VISIBLE,
  CONSTRAINT `fk_Assignments_Courses1`
    FOREIGN KEY (`Courses_CourseID`)
    REFERENCES `mydb`.`Courses` (`CourseID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`AssignmentGrades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`AssignmentGrades` ;

CREATE TABLE IF NOT EXISTS `mydb`.`AssignmentGrades` (
  `idAssignmentGrades` INT NOT NULL AUTO_INCREMENT,
  `Stud_ID` INT NULL,
  `Grade` VARCHAR(45) NULL,
  `Assignments_idAssignments` INT NOT NULL,
  `Assignments_Courses_CourseID` INT NOT NULL,
  PRIMARY KEY (`idAssignmentGrades`, `Assignments_idAssignments`, `Assignments_Courses_CourseID`),
  INDEX `fk_AssignmentGrades_Assignments1_idx` (`Assignments_idAssignments` ASC, `Assignments_Courses_CourseID` ASC) VISIBLE,
  CONSTRAINT `fk_AssignmentGrades_Assignments1`
    FOREIGN KEY (`Assignments_idAssignments` , `Assignments_Courses_CourseID`)
    REFERENCES `mydb`.`Assignments` (`idAssignments` , `Courses_CourseID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Enrollment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Enrollment` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Enrollment` (
  `idEnrollment` INT NOT NULL,
  `Courses_CourseID` INT NOT NULL,
  `StudenterCanvas_STUD_ID` INT NOT NULL,
  PRIMARY KEY (`idEnrollment`, `Courses_CourseID`, `StudenterCanvas_STUD_ID`),
  INDEX `fk_Enrollment_Courses1_idx` (`Courses_CourseID` ASC) VISIBLE,
  INDEX `fk_Enrollment_StudenterCanvas1_idx` (`StudenterCanvas_STUD_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Enrollment_Courses1`
    FOREIGN KEY (`Courses_CourseID`)
    REFERENCES `mydb`.`Courses` (`CourseID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Enrollment_StudenterCanvas1`
    FOREIGN KEY (`StudenterCanvas_STUD_ID`)
    REFERENCES `mydb`.`StudenterCanvas` (`STUD_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;



-- Procedure to get all students in a course as JSON
CREATE PROCEDURE getStudentsInCourseJson(
    IN course_id INT
)
BEGIN
    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'STUD_ID', s.STUD_ID,
            'USER_NAME', s.USER_NAME,
            'FIRST_NAME', s.FIRST_NAME,
            'LAST_NAME', s.LAST_NAME
        )
    ) AS students
    FROM StudenterCanvas s
    JOIN Enrollment e ON s.STUD_ID = e.StudenterCanvas_STUD_ID
    WHERE e.Courses_CourseID = course_id;
END;

-- Procedure to get all students in a specific assignment with grades as JSON
CREATE PROCEDURE getStudentsInAssignmentJson(
    IN p_assignment_id INT,
    IN p_course_id INT
)
BEGIN
    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'StudentID', s.STUD_ID,
            'UserName', s.USER_NAME,
            'FirstName', s.FIRST_NAME,
            'LastName', s.LAST_NAME,
            'Grade', ag.Grade
        )
    ) AS students
    FROM StudenterCanvas s
    JOIN AssignmentGrades ag ON s.STUD_ID = ag.Stud_ID
    WHERE ag.Assignments_idAssignments = p_assignment_id
      AND ag.Assignments_Courses_CourseID = p_course_id;
END;

-- Procedure to get all assignments related to a course as JSON
CREATE PROCEDURE getAssignmentsByCourseJson(
    IN course_id INT
)
BEGIN
    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'AssignmentID', a.idAssignments,
            'AssignmentName', a.AssignmentName
        )
    ) AS assignments
    FROM Assignments a
    WHERE a.Courses_CourseID = course_id;
END;






SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;



